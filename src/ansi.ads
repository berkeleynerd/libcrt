--  XXX ANSI/VT100 Terminal Control Escape Sequences

--  Many computer terminals and terminal emulators support color and cursor control through a system of escape sequences. One
--  such standard is commonly referred to as ANSI Colour. Several terminal specifications are based on the ANSI colour standard,
--  including VT100.

--  The following is a partial implementation of the VT100 control set.

--  <ESC> represents the ASCII "escape" character, 0x1B or Latin_1.ESC. Bracketed tags represent modifiable decimal parameters; e.g.
--  {ROW} would be replaced by a row number.

--  http://www.termsys.demon.co.uk/vtansi.htm http://archive.vn/D69Dj

--  https://www.inwap.com/pdp10/ansicode.txt http://archive.vn/wip/Pcphi

PACKAGE ansi IS

   control_preamble : CONSTANT Character := Character'val (27);

   --
   --  DEVICE STATUS
   --
   --  The following codes are used for reporting terminal settings and vary by implementation.
   --

   --  QUERY_DEVICE_CODE -- <ESC>[c
   --
   --  Requests a REPORT_DEVICE_CODE response from the device.

   query_device_code : CONSTANT String := control_preamble & "[c";

   --  REPORT_DEVICE_CODE -- <ESC>[{CODE}0c
   --
   --  Generated by the device in response to Query Device Code request.

   report_device_code : CONSTANT String := control_preamble & "[{CODE}0c";

   --  QUERY_DEVICE_STATUS -- <ESC>[5n
   --
   --  Requests a Report Device Status response from the device.

   query_device_status : CONSTANT String := control_preamble & "[5n";

   --  REPORT_DEVICE_OK -- <ESC>[0n
   --
   --  Generated by the device in response to a QUERY_DEVICE_STATUS request; indicates that device is functioning correctly.

   report_device_ok : CONSTANT String := control_preamble & "[0n";

   --  REPORT_DEVICE_FAILURE -- <ESC>[3n
   --
   --  Generated by the device in response to a QUERY_DEVICE_STATUS request; indicates that device is functioning improperly.

   report_device_failure : CONSTANT String := control_preamble & "[3n";

   --  QUERY_CURSOR_POSITION -- <ESC>[6n
   --
   --  Requests a REPORT_CURSOR_POSITION response from the device.

   query_cursor_position : CONSTANT String := control_preamble & "[6n";

   --  REPORT_CURSOR_POSITION -- <ESC>[{ROW};{COLUMN}R
   --
   --  Generated by the device in response to a QUERY_CURSOR_POSITION request.

   report_cursor_position : CONSTANT String := control_preamble & "[{ROW};{COLUMN}R";

   --
   --  CURSOR CONTROL
   --

   --  CURSOR_HOME -- <ESC>[{ROW};{COLUMN}H
   --
   --  Sets the cursor position where subsequent text will begin. If both ROW and COLUMN are omitted the cursor moves to the origin
   --  (upper-left) of the screen.

   cursor_home : CONSTANT String := control_preamble & "[;H";

   --  FORCE_CURSOR_POSITION -- <ESC>[{ROW};{COLUMN}f
   --
   --  Identical to CURSOR_HOME.

   force_cursor_position : CONSTANT String := control_preamble & "[;f";

   --  CURSOR_UP -- <ESC>[{COUNT}A
   --
   --  Moves the cursor up by count rows; the default count is 1.

   cursor_up : CONSTANT String := control_preamble & "1A";

   --  CURSOR_DOWN -- <ESC>[{COUNT}B
   --
   --  Moves the cursor down by COUNT rows; the default count is 1.

   cursor_down : CONSTANT String := control_preamble & "1B";

   --  CURSOR_RIGHT --<ESC>[{COUNT}C
   --
   --  Moves the cursor forward by COUNT columns; the default count is 1.

   cursor_right : CONSTANT String := control_preamble & "1C";

   --  CURSOR_LEFT -- <ESC>[{COUNT}D
   --
   --  Moves the cursor backward by COUNT columns; the default count is 1.

   cursor_left : CONSTANT String := control_preamble & "1D";

   --  SAVE_CURSOR -- <ESC>[s
   --
   --  Saves current cursor position.

   save_cursor : CONSTANT String := control_preamble & "[s";

   --  UNSAVE_CURSOR -- <ESC>[u
   --
   --  Restores cursor position following SAVE_CURSOR.

   restore_cursor : CONSTANT String := control_preamble & "[u";

   --  SAVE_CURSOR_AND_ATTRIBUTES -- <ESC>7
   --
   --  Save current cursor position.

   save_cursor_and_attributes : CONSTANT String := control_preamble & "7";

   --  RESTORE_CURSOR_AND_ATTRIBUTES -- <ESC>8
   --
   --  Restores cursor position after a Save Cursor.

   restore_cursor_and_attributes : CONSTANT String := control_preamble & "8";

   --
   --  ERASE CHARACTERS
   --

   --  CLEAR_SCREEN -- <ESC>[2J
   --
   --  Erases the screen and moves the cursor to screen origin.

   clear_screen : CONSTANT String := cursor_home & control_preamble & "[2J";

   --  CLEAR_BEGINNING_OF_LINE -- <ESC>[1K
   --
   --  Erases characters from the cursor position to the start of the current line.

   clear_beginning_of_line : CONSTANT String := control_preamble & "[1K";

   --  CLEAR_END_OF_LINE -- <ESC>[K
   --
   --  Erases characters from the cursor position to the end of the current line.

   clear_end_of_line : CONSTANT String := control_preamble & "[0K";

   --  CLEAR_LINE -- <ESC>[2K
   --  Erases the entire current line.

   clear_line : CONSTANT String := control_preamble & "[2K";

   --  CLEAR_TO_BOTTOM -- <ESC>[J
   --
   --  Erases the screen from the current line down to the bottom of the screen.

   clear_to_bottom : CONSTANT String := control_preamble & "[J";

   --  CLEAR_TO_TOP -- <ESC>[1J
   --
   --  Erases the screen from the current line up to the top of the screen.

   clear_to_top : CONSTANT String := control_preamble & "[1J";

   --  INSERT_LINE --<ESC>[{COUNT}L
   --
   --  Insert COUNT lines moving current line down (VT102)

   insert_line : CONSTANT String := control_preamble & "[1L";

   --  DELETE_LINE --<ESC>[{COUNT}M
   --
   --  Delete COUNT lines moving lines below current up (VT102)

   delete_line : CONSTANT String := control_preamble & "[1M";

   --
   --  CHARACTER ATTRIBUTES
   --

   --  Multiple display attribute settings may be specified -- e.g., <ESC>[{attr1};...;{attrn}m The following lists standard
   --  attributes:

   --     0        Normal (reset all attributes)
   --     1        Bold (or bright)
   --     2        Dim (or secondary color)
   --     3        Italic (if supported)
   --     4        Underscored
   --     5        Blinking
   --     6        Rapid Blinking
   --     7        Inverted / Reversed / Negative
   --     8        Hidden / Concealed / Echo Off

   normal_mode     : CONSTANT String := control_preamble & "[0m";
   bold_mode       : CONSTANT String := control_preamble & "[1m";
   dim_mode        : CONSTANT String := control_preamble & "[2m";
   italic_mode     : CONSTANT String := control_preamble & "[3m";
   underline_mode  : CONSTANT String := control_preamble & "[4m";
   blink_mode      : CONSTANT String := control_preamble & "[5m";
   fast_blink_mode : CONSTANT String := control_preamble & "[6m";
   inverse_mode    : CONSTANT String := control_preamble & "[7m";
   echo_off_mode   : CONSTANT String := control_preamble & "[8m";

   --     Foreground Color
   --
   --     30       Black
   --     31       Red
   --     32       Green
   --     33       Yellow
   --     34       Blue
   --     35       Magenta
   --     36       Cyan
   --     37       White

   --     Background Colors
   --
   --     40       Black
   --     41       Red
   --     42       Green
   --     43       Yellow
   --     44       Blue
   --     45       Magenta
   --     46       Cyan
   --     47       White

END ansi;

-- Terminal Setup
--  The h and l codes are used for setting terminal/display mode, and vary depending on the implementation. Line Wrap is one of the
--  few setup codes that tend to be used consistently:

--  Reset Device <ESC>c

--     Reset all terminal settings to default.

--  Enable Line Wrap <ESC>[7h

--     Text wraps to next line if longer than the length of the display area.

--  Disable Line Wrap <ESC>[7l

--     Disables line wrapping.

-- Fonts
--  Some terminals support multiple fonts: normal/bold, swiss/italic, etc. There are a variety of special codes for certain
--  terminals; the following are fairly standard:

--  Font Set G0 <ESC>(

--     Set default font.

--  Font Set G1 <ESC>)

--     Set alternate font.

-- Scrolling

--  Scroll Screen <ESC>[r

--     Enable scrolling for entire display.

--  Scroll Screen <ESC>[{start};{end}r

--     Enable scrolling from row {start} to row {end}.

--  Scroll Down <ESC>D

--     Scroll display down one line.

--  Scroll Up <ESC>M

--     Scroll display up one line.

-- Tab Control

--  Set Tab <ESC>H

--     Sets a tab at the current position.

--  Clear Tab <ESC>[g

--     Clears tab at the current position.

--  Clear All Tabs <ESC>[3g

--     Clears all tabs.

-- Printing
--  Some terminals support local printing:

--  Print Screen <ESC>[i

--     Print the current screen.

--  Print Line <ESC>[1i

--     Print the current line.

--  Stop Print Log <ESC>[4i

--     Disable log.

--  Start Print Log <ESC>[5i

--     Start log; all received text is echoed to a printer.

-- Define Key

--  Set Key Definition <ESC>[{key};"{string}"p

--     Associates a string of text to a keyboard key. {key} indicates the key by its ASCII value in decimal.
